buildscript {
    apply from: 'constants.gradle'
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:${versions.androidGradle}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:${versions.dokka}"
    }
}

def releaseDeps = moduleVersion
        .collectEntries { moduleName, version ->
            [(moduleName): "${groupId}:$moduleName:$version"]
        }

allprojects { project ->
    group = groupId
    def repoUrl = "https://raw.github.com/arunkumar9t2/base-android/master/maven-repo/"

    project.extensions.add("deps", releaseDeps)

    repositories {
        google()
        jcenter()
        maven {
            url "${repoUrl}releases"
            mavenContent {
                releasesOnly()
            }
            content {
                includeGroup group
            }
        }
        maven {
            url "${repoUrl}snapshots"
            mavenContent {
                snapshotsOnly()
            }
            content {
                includeGroup group
            }
        }
    }

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

def sampleAppName = "sample-app"

subprojects { subProject ->
    apply from: '../constants.gradle'
    if (subProject.name != sampleAppName) {
        subProject.ext.artifact = subProject.name
        subProject.version = subProject.ext.moduleVersion[subProject.name]
        apply from: '../libraryModule.gradle'
        apply from: '../publishing.gradle'
    }
}

/*def sampleApp = subprojects.find { it.name == sampleAppName }
def libraryProjects = subprojects.findAll { it.name != sampleAppName }
libraryProjects.each { library ->
    library.afterEvaluate {
        // Apply all library modules as dependencies to sample project
        sampleApp.afterEvaluate {
            sampleApp.dependencies {
                localImplementation project(path: ":${library.name}")
                remoteImplementation "${library.group}:${library.name}:${library.version}"
                snapshotImplementation "${library.group}:${library.name}:master-SNAPSHOT"
            }
        }
    }
}*/

task clean(type: Delete) {
    delete rootProject.buildDir
}
